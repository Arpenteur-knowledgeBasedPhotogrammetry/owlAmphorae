/**
 * Get Data property of a specific individual and display it in a JTable
 * For the plugin and the editor
 * 
 * @author Yaaqoub Semlali, The University Of Aix-Marseille
 * @see <a href="http://www.yaaqoubsemlali.com">http://www.yaaqoubsemlali.com</a>
 */

package edu.amu.nym.common;

import java.util.Set;
import java.util.Vector;

import javax.swing.table.DefaultTableModel;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLDataPropertyAssertionAxiom;
import org.semanticweb.owlapi.model.OWLLiteral;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.reasoner.NodeSet;
import org.semanticweb.owlapi.search.EntitySearcher;

import edu.amu.nym.editor.model.graph.GraphLauncher;
import edu.amu.nym.variables.MyVariables;

public class GetDataProperty extends DefaultTableModel {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 5246548696494883437L;

	/**
	 * Constructs a GetDataProperty who can get data property as a DefaultTableModel
	 * I use Vector to store data because the size of Vector can grow or shrink as needed.
	 * 
	 * @param individualName	selected individual
	 */
	public GetDataProperty(String individualName) {
		System.out.println("======== {Start loading Data Property for " + individualName + "} ========");
		
		//Add two column to Table model
		this.addColumn("Data Property");
		this.addColumn("Value");
		
		//Create a vector to store ontology data property.
		Vector<Object> rows = null;
		
		//The first Loop is to get ontology classes so we can create instances of each class 
		//and see if it is the right one and so on.
		for (OWLClass c : MyVariables.ontology.getClassesInSignature()) {
			NodeSet<OWLNamedIndividual> instances = MyVariables.reasoner.getInstances(c, false);
			
			for (OWLNamedIndividual i : instances.getFlattened()) {
				if(i.getIRI().getShortForm().equals(individualName)) {
					
					OWLNamedIndividual input = MyVariables.dataFactory.getOWLNamedIndividual(IRI.create(i.getIRI().toString()));
					Set<OWLDataPropertyAssertionAxiom> properties = MyVariables.ontology.getDataPropertyAssertionAxioms(input);
					
					for (OWLDataPropertyAssertionAxiom ax: properties) {
						for (OWLLiteral propertyLit :  EntitySearcher.getDataPropertyValues(i, ax.getProperty(), MyVariables.ontology)) {
							//Create a new Vector for each row we added
							rows = new Vector<Object>();
							rows.add(ax.getDataPropertiesInSignature().iterator().next().getIRI().getShortForm());
							rows.add(propertyLit.getLiteral());
						}
						//Add the created rows to Table model
						this.addRow(rows);
					}
				}
			}
		}
		System.out.println("======== {End loading Data Properties} ========");
	}
}
